/* automatically generated by rust-bindgen */

use libc::{int64_t, uint64_t, size_t};

pub type int64 = int64_t;
pub type uint64 = uint64_t;
pub type uchar = ::libc::c_uchar;
pub type ushort = ::libc::c_ushort;
pub type schar = ::libc::c_char;
pub type CvArr = ::libc::c_void;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Cv32suf {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Cv32suf {
    pub unsafe fn i(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u(&mut self) -> *mut ::libc::c_uint {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn f(&mut self) -> *mut ::libc::c_float {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Cv32suf {
    fn default() -> Union_Cv32suf { unsafe { ::std::mem::zeroed() } }
}
pub type Cv32suf = Union_Cv32suf;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Cv64suf {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Cv64suf {
    pub unsafe fn i(&mut self) -> *mut int64 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn u(&mut self) -> *mut uint64 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn f(&mut self) -> *mut ::libc::c_double {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Cv64suf {
    fn default() -> Union_Cv64suf { unsafe { ::std::mem::zeroed() } }
}
pub type Cv64suf = Union_Cv64suf;
pub type CVStatus = ::libc::c_int;
pub type Enum_Unnamed1 = ::libc::c_int;
pub const CV_StsOk: ::libc::c_int = 0;
pub const CV_StsBackTrace: ::libc::c_int = -1;
pub const CV_StsError: ::libc::c_int = -2;
pub const CV_StsInternal: ::libc::c_int = -3;
pub const CV_StsNoMem: ::libc::c_int = -4;
pub const CV_StsBadArg: ::libc::c_int = -5;
pub const CV_StsBadFunc: ::libc::c_int = -6;
pub const CV_StsNoConv: ::libc::c_int = -7;
pub const CV_StsAutoTrace: ::libc::c_int = -8;
pub const CV_HeaderIsNull: ::libc::c_int = -9;
pub const CV_BadImageSize: ::libc::c_int = -10;
pub const CV_BadOffset: ::libc::c_int = -11;
pub const CV_BadDataPtr: ::libc::c_int = -12;
pub const CV_BadStep: ::libc::c_int = -13;
pub const CV_BadModelOrChSeq: ::libc::c_int = -14;
pub const CV_BadNumChannels: ::libc::c_int = -15;
pub const CV_BadNumChannel1U: ::libc::c_int = -16;
pub const CV_BadDepth: ::libc::c_int = -17;
pub const CV_BadAlphaChannel: ::libc::c_int = -18;
pub const CV_BadOrder: ::libc::c_int = -19;
pub const CV_BadOrigin: ::libc::c_int = -20;
pub const CV_BadAlign: ::libc::c_int = -21;
pub const CV_BadCallBack: ::libc::c_int = -22;
pub const CV_BadTileSize: ::libc::c_int = -23;
pub const CV_BadCOI: ::libc::c_int = -24;
pub const CV_BadROISize: ::libc::c_int = -25;
pub const CV_MaskIsTiled: ::libc::c_int = -26;
pub const CV_StsNullPtr: ::libc::c_int = -27;
pub const CV_StsVecLengthErr: ::libc::c_int = -28;
pub const CV_StsFilterStructContentErr: ::libc::c_int = -29;
pub const CV_StsKernelStructContentErr: ::libc::c_int = -30;
pub const CV_StsFilterOffsetErr: ::libc::c_int = -31;
pub const CV_StsBadSize: ::libc::c_int = -201;
pub const CV_StsDivByZero: ::libc::c_int = -202;
pub const CV_StsInplaceNotSupported: ::libc::c_int = -203;
pub const CV_StsObjectNotFound: ::libc::c_int = -204;
pub const CV_StsUnmatchedFormats: ::libc::c_int = -205;
pub const CV_StsBadFlag: ::libc::c_int = -206;
pub const CV_StsBadPoint: ::libc::c_int = -207;
pub const CV_StsBadMask: ::libc::c_int = -208;
pub const CV_StsUnmatchedSizes: ::libc::c_int = -209;
pub const CV_StsUnsupportedFormat: ::libc::c_int = -210;
pub const CV_StsOutOfRange: ::libc::c_int = -211;
pub const CV_StsParseError: ::libc::c_int = -212;
pub const CV_StsNotImplemented: ::libc::c_int = -213;
pub const CV_StsBadMemBlock: ::libc::c_int = -214;
pub const CV_StsAssert: ::libc::c_int = -215;
pub const CV_GpuNotSupported: ::libc::c_int = -216;
pub const CV_GpuApiCallError: ::libc::c_int = -217;
pub const CV_OpenGlNotSupported: ::libc::c_int = -218;
pub const CV_OpenGlApiCallError: ::libc::c_int = -219;
pub const CV_OpenCLDoubleNotSupported: ::libc::c_int = -220;
pub const CV_OpenCLInitError: ::libc::c_int = -221;
pub const CV_OpenCLNoAMDBlasFft: ::libc::c_int = -222;
pub type CvRNG = uint64;
pub enum Struct__IplTileInfo { }
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct__IplImage {
    pub nSize: ::libc::c_int,
    pub ID: ::libc::c_int,
    pub nChannels: ::libc::c_int,
    pub alphaChannel: ::libc::c_int,
    pub depth: ::libc::c_int,
    pub colorModel: [::libc::c_char; 4usize],
    pub channelSeq: [::libc::c_char; 4usize],
    pub dataOrder: ::libc::c_int,
    pub origin: ::libc::c_int,
    pub align: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub roi: *mut Struct__IplROI,
    pub maskROI: *mut Struct__IplImage,
    pub imageId: *mut ::libc::c_void,
    pub tileInfo: *mut Struct__IplTileInfo,
    pub imageSize: ::libc::c_int,
    pub imageData: *mut ::libc::c_char,
    pub widthStep: ::libc::c_int,
    pub BorderMode: [::libc::c_int; 4usize],
    pub BorderConst: [::libc::c_int; 4usize],
    pub imageDataOrigin: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct__IplImage {
    fn default() -> Struct__IplImage { unsafe { ::std::mem::zeroed() } }
}
pub type IplImage = Struct__IplImage;
pub type IplTileInfo = Struct__IplTileInfo;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct__IplROI {
    pub coi: ::libc::c_int,
    pub xOffset: ::libc::c_int,
    pub yOffset: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
}
impl ::std::default::Default for Struct__IplROI {
    fn default() -> Struct__IplROI { unsafe { ::std::mem::zeroed() } }
}
pub type IplROI = Struct__IplROI;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct__IplConvKernel {
    pub nCols: ::libc::c_int,
    pub nRows: ::libc::c_int,
    pub anchorX: ::libc::c_int,
    pub anchorY: ::libc::c_int,
    pub values: *mut ::libc::c_int,
    pub nShiftR: ::libc::c_int,
}
impl ::std::default::Default for Struct__IplConvKernel {
    fn default() -> Struct__IplConvKernel { unsafe { ::std::mem::zeroed() } }
}
pub type IplConvKernel = Struct__IplConvKernel;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct__IplConvKernelFP {
    pub nCols: ::libc::c_int,
    pub nRows: ::libc::c_int,
    pub anchorX: ::libc::c_int,
    pub anchorY: ::libc::c_int,
    pub values: *mut ::libc::c_float,
}
impl ::std::default::Default for Struct__IplConvKernelFP {
    fn default() -> Struct__IplConvKernelFP {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type IplConvKernelFP = Struct__IplConvKernelFP;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvMat {
    pub _type: ::libc::c_int,
    pub step: ::libc::c_int,
    pub refcount: *mut ::libc::c_int,
    pub hdr_refcount: ::libc::c_int,
    pub data: Union_Unnamed2,
    pub rows: ::libc::c_int,
    pub cols: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvMat {
    fn default() -> Struct_CvMat { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed2 {
    pub unsafe fn ptr(&mut self) -> *mut *mut uchar {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn s(&mut self) -> *mut *mut ::libc::c_short {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn i(&mut self) -> *mut *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn fl(&mut self) -> *mut *mut ::libc::c_float {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn db(&mut self) -> *mut *mut ::libc::c_double {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Union_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type CvMat = Struct_CvMat;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvMatND {
    pub _type: ::libc::c_int,
    pub dims: ::libc::c_int,
    pub refcount: *mut ::libc::c_int,
    pub hdr_refcount: ::libc::c_int,
    pub data: Union_Unnamed3,
    pub dim: [Struct_Unnamed4; 32usize],
}
impl ::std::default::Default for Struct_CvMatND {
    fn default() -> Struct_CvMatND { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn ptr(&mut self) -> *mut *mut uchar {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn fl(&mut self) -> *mut *mut ::libc::c_float {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn db(&mut self) -> *mut *mut ::libc::c_double {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn i(&mut self) -> *mut *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn s(&mut self) -> *mut *mut ::libc::c_short {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Union_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed4 {
    pub size: ::libc::c_int,
    pub step: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type CvMatND = Struct_CvMatND;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSparseMat {
    pub _type: ::libc::c_int,
    pub dims: ::libc::c_int,
    pub refcount: *mut ::libc::c_int,
    pub hdr_refcount: ::libc::c_int,
    pub heap: *mut Struct_CvSet,
    pub hashtable: *mut *mut ::libc::c_void,
    pub hashsize: ::libc::c_int,
    pub valoffset: ::libc::c_int,
    pub idxoffset: ::libc::c_int,
    pub size: [::libc::c_int; 32usize],
}
impl ::std::default::Default for Struct_CvSparseMat {
    fn default() -> Struct_CvSparseMat { unsafe { ::std::mem::zeroed() } }
}
pub type CvSparseMat = Struct_CvSparseMat;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSparseNode {
    pub hashval: ::libc::c_uint,
    pub next: *mut Struct_CvSparseNode,
}
impl ::std::default::Default for Struct_CvSparseNode {
    fn default() -> Struct_CvSparseNode { unsafe { ::std::mem::zeroed() } }
}
pub type CvSparseNode = Struct_CvSparseNode;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSparseMatIterator {
    pub mat: *mut CvSparseMat,
    pub node: *mut CvSparseNode,
    pub curidx: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvSparseMatIterator {
    fn default() -> Struct_CvSparseMatIterator {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CvSparseMatIterator = Struct_CvSparseMatIterator;
pub type CvHistType = ::libc::c_int;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvHistogram {
    pub _type: ::libc::c_int,
    pub bins: *mut CvArr,
    pub thresh: [[::libc::c_float; 2usize]; 32usize],
    pub thresh2: *mut *mut ::libc::c_float,
    pub mat: CvMatND,
}
impl ::std::default::Default for Struct_CvHistogram {
    fn default() -> Struct_CvHistogram { unsafe { ::std::mem::zeroed() } }
}
pub type CvHistogram = Struct_CvHistogram;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvRect {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvRect {
    fn default() -> Struct_CvRect { unsafe { ::std::mem::zeroed() } }
}
pub type CvRect = Struct_CvRect;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvTermCriteria {
    pub _type: ::libc::c_int,
    pub max_iter: ::libc::c_int,
    pub epsilon: ::libc::c_double,
}
impl ::std::default::Default for Struct_CvTermCriteria {
    fn default() -> Struct_CvTermCriteria { unsafe { ::std::mem::zeroed() } }
}
pub type CvTermCriteria = Struct_CvTermCriteria;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvPoint {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvPoint {
    fn default() -> Struct_CvPoint { unsafe { ::std::mem::zeroed() } }
}
pub type CvPoint = Struct_CvPoint;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvPoint2D32f {
    pub x: ::libc::c_float,
    pub y: ::libc::c_float,
}
impl ::std::default::Default for Struct_CvPoint2D32f {
    fn default() -> Struct_CvPoint2D32f { unsafe { ::std::mem::zeroed() } }
}
pub type CvPoint2D32f = Struct_CvPoint2D32f;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvPoint3D32f {
    pub x: ::libc::c_float,
    pub y: ::libc::c_float,
    pub z: ::libc::c_float,
}
impl ::std::default::Default for Struct_CvPoint3D32f {
    fn default() -> Struct_CvPoint3D32f { unsafe { ::std::mem::zeroed() } }
}
pub type CvPoint3D32f = Struct_CvPoint3D32f;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvPoint2D64f {
    pub x: ::libc::c_double,
    pub y: ::libc::c_double,
}
impl ::std::default::Default for Struct_CvPoint2D64f {
    fn default() -> Struct_CvPoint2D64f { unsafe { ::std::mem::zeroed() } }
}
pub type CvPoint2D64f = Struct_CvPoint2D64f;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvPoint3D64f {
    pub x: ::libc::c_double,
    pub y: ::libc::c_double,
    pub z: ::libc::c_double,
}
impl ::std::default::Default for Struct_CvPoint3D64f {
    fn default() -> Struct_CvPoint3D64f { unsafe { ::std::mem::zeroed() } }
}
pub type CvPoint3D64f = Struct_CvPoint3D64f;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSize {
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvSize {
    fn default() -> Struct_CvSize { unsafe { ::std::mem::zeroed() } }
}
pub type CvSize = Struct_CvSize;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSize2D32f {
    pub width: ::libc::c_float,
    pub height: ::libc::c_float,
}
impl ::std::default::Default for Struct_CvSize2D32f {
    fn default() -> Struct_CvSize2D32f { unsafe { ::std::mem::zeroed() } }
}
pub type CvSize2D32f = Struct_CvSize2D32f;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvBox2D {
    pub center: CvPoint2D32f,
    pub size: CvSize2D32f,
    pub angle: ::libc::c_float,
}
impl ::std::default::Default for Struct_CvBox2D {
    fn default() -> Struct_CvBox2D { unsafe { ::std::mem::zeroed() } }
}
pub type CvBox2D = Struct_CvBox2D;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvLineIterator {
    pub ptr: *mut uchar,
    pub err: ::libc::c_int,
    pub plus_delta: ::libc::c_int,
    pub minus_delta: ::libc::c_int,
    pub plus_step: ::libc::c_int,
    pub minus_step: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvLineIterator {
    fn default() -> Struct_CvLineIterator { unsafe { ::std::mem::zeroed() } }
}
pub type CvLineIterator = Struct_CvLineIterator;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSlice {
    pub start_index: ::libc::c_int,
    pub end_index: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvSlice {
    fn default() -> Struct_CvSlice { unsafe { ::std::mem::zeroed() } }
}
pub type CvSlice = Struct_CvSlice;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvScalar {
    pub val: [::libc::c_double; 4usize],
}
impl ::std::default::Default for Struct_CvScalar {
    fn default() -> Struct_CvScalar { unsafe { ::std::mem::zeroed() } }
}
pub type CvScalar = Struct_CvScalar;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvMemBlock {
    pub prev: *mut Struct_CvMemBlock,
    pub next: *mut Struct_CvMemBlock,
}
impl ::std::default::Default for Struct_CvMemBlock {
    fn default() -> Struct_CvMemBlock { unsafe { ::std::mem::zeroed() } }
}
pub type CvMemBlock = Struct_CvMemBlock;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvMemStorage {
    pub signature: ::libc::c_int,
    pub bottom: *mut CvMemBlock,
    pub top: *mut CvMemBlock,
    pub parent: *mut Struct_CvMemStorage,
    pub block_size: ::libc::c_int,
    pub free_space: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvMemStorage {
    fn default() -> Struct_CvMemStorage { unsafe { ::std::mem::zeroed() } }
}
pub type CvMemStorage = Struct_CvMemStorage;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvMemStoragePos {
    pub top: *mut CvMemBlock,
    pub free_space: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvMemStoragePos {
    fn default() -> Struct_CvMemStoragePos { unsafe { ::std::mem::zeroed() } }
}
pub type CvMemStoragePos = Struct_CvMemStoragePos;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSeqBlock {
    pub prev: *mut Struct_CvSeqBlock,
    pub next: *mut Struct_CvSeqBlock,
    pub start_index: ::libc::c_int,
    pub count: ::libc::c_int,
    pub data: *mut schar,
}
impl ::std::default::Default for Struct_CvSeqBlock {
    fn default() -> Struct_CvSeqBlock { unsafe { ::std::mem::zeroed() } }
}
pub type CvSeqBlock = Struct_CvSeqBlock;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSeq {
    pub flags: ::libc::c_int,
    pub header_size: ::libc::c_int,
    pub h_prev: *mut Struct_CvSeq,
    pub h_next: *mut Struct_CvSeq,
    pub v_prev: *mut Struct_CvSeq,
    pub v_next: *mut Struct_CvSeq,
    pub total: ::libc::c_int,
    pub elem_size: ::libc::c_int,
    pub block_max: *mut schar,
    pub ptr: *mut schar,
    pub delta_elems: ::libc::c_int,
    pub storage: *mut CvMemStorage,
    pub free_blocks: *mut CvSeqBlock,
    pub first: *mut CvSeqBlock,
}
impl ::std::default::Default for Struct_CvSeq {
    fn default() -> Struct_CvSeq { unsafe { ::std::mem::zeroed() } }
}
pub type CvSeq = Struct_CvSeq;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSetElem {
    pub flags: ::libc::c_int,
    pub next_free: *mut Struct_CvSetElem,
}
impl ::std::default::Default for Struct_CvSetElem {
    fn default() -> Struct_CvSetElem { unsafe { ::std::mem::zeroed() } }
}
pub type CvSetElem = Struct_CvSetElem;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSet {
    pub flags: ::libc::c_int,
    pub header_size: ::libc::c_int,
    pub h_prev: *mut Struct_CvSeq,
    pub h_next: *mut Struct_CvSeq,
    pub v_prev: *mut Struct_CvSeq,
    pub v_next: *mut Struct_CvSeq,
    pub total: ::libc::c_int,
    pub elem_size: ::libc::c_int,
    pub block_max: *mut schar,
    pub ptr: *mut schar,
    pub delta_elems: ::libc::c_int,
    pub storage: *mut CvMemStorage,
    pub free_blocks: *mut CvSeqBlock,
    pub first: *mut CvSeqBlock,
    pub free_elems: *mut CvSetElem,
    pub active_count: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvSet {
    fn default() -> Struct_CvSet { unsafe { ::std::mem::zeroed() } }
}
pub type CvSet = Struct_CvSet;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvGraphEdge {
    pub flags: ::libc::c_int,
    pub weight: ::libc::c_float,
    pub next: [*mut Struct_CvGraphEdge; 2usize],
    pub vtx: [*mut Struct_CvGraphVtx; 2usize],
}
impl ::std::default::Default for Struct_CvGraphEdge {
    fn default() -> Struct_CvGraphEdge { unsafe { ::std::mem::zeroed() } }
}
pub type CvGraphEdge = Struct_CvGraphEdge;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvGraphVtx {
    pub flags: ::libc::c_int,
    pub first: *mut Struct_CvGraphEdge,
}
impl ::std::default::Default for Struct_CvGraphVtx {
    fn default() -> Struct_CvGraphVtx { unsafe { ::std::mem::zeroed() } }
}
pub type CvGraphVtx = Struct_CvGraphVtx;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvGraphVtx2D {
    pub flags: ::libc::c_int,
    pub first: *mut Struct_CvGraphEdge,
    pub ptr: *mut CvPoint2D32f,
}
impl ::std::default::Default for Struct_CvGraphVtx2D {
    fn default() -> Struct_CvGraphVtx2D { unsafe { ::std::mem::zeroed() } }
}
pub type CvGraphVtx2D = Struct_CvGraphVtx2D;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvGraph {
    pub flags: ::libc::c_int,
    pub header_size: ::libc::c_int,
    pub h_prev: *mut Struct_CvSeq,
    pub h_next: *mut Struct_CvSeq,
    pub v_prev: *mut Struct_CvSeq,
    pub v_next: *mut Struct_CvSeq,
    pub total: ::libc::c_int,
    pub elem_size: ::libc::c_int,
    pub block_max: *mut schar,
    pub ptr: *mut schar,
    pub delta_elems: ::libc::c_int,
    pub storage: *mut CvMemStorage,
    pub free_blocks: *mut CvSeqBlock,
    pub first: *mut CvSeqBlock,
    pub free_elems: *mut CvSetElem,
    pub active_count: ::libc::c_int,
    pub edges: *mut CvSet,
}
impl ::std::default::Default for Struct_CvGraph {
    fn default() -> Struct_CvGraph { unsafe { ::std::mem::zeroed() } }
}
pub type CvGraph = Struct_CvGraph;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvChain {
    pub flags: ::libc::c_int,
    pub header_size: ::libc::c_int,
    pub h_prev: *mut Struct_CvSeq,
    pub h_next: *mut Struct_CvSeq,
    pub v_prev: *mut Struct_CvSeq,
    pub v_next: *mut Struct_CvSeq,
    pub total: ::libc::c_int,
    pub elem_size: ::libc::c_int,
    pub block_max: *mut schar,
    pub ptr: *mut schar,
    pub delta_elems: ::libc::c_int,
    pub storage: *mut CvMemStorage,
    pub free_blocks: *mut CvSeqBlock,
    pub first: *mut CvSeqBlock,
    pub origin: CvPoint,
}
impl ::std::default::Default for Struct_CvChain {
    fn default() -> Struct_CvChain { unsafe { ::std::mem::zeroed() } }
}
pub type CvChain = Struct_CvChain;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvContour {
    pub flags: ::libc::c_int,
    pub header_size: ::libc::c_int,
    pub h_prev: *mut Struct_CvSeq,
    pub h_next: *mut Struct_CvSeq,
    pub v_prev: *mut Struct_CvSeq,
    pub v_next: *mut Struct_CvSeq,
    pub total: ::libc::c_int,
    pub elem_size: ::libc::c_int,
    pub block_max: *mut schar,
    pub ptr: *mut schar,
    pub delta_elems: ::libc::c_int,
    pub storage: *mut CvMemStorage,
    pub free_blocks: *mut CvSeqBlock,
    pub first: *mut CvSeqBlock,
    pub rect: CvRect,
    pub color: ::libc::c_int,
    pub reserved: [::libc::c_int; 3usize],
}
impl ::std::default::Default for Struct_CvContour {
    fn default() -> Struct_CvContour { unsafe { ::std::mem::zeroed() } }
}
pub type CvContour = Struct_CvContour;
pub type CvPoint2DSeq = CvContour;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSeqWriter {
    pub header_size: ::libc::c_int,
    pub seq: *mut CvSeq,
    pub block: *mut CvSeqBlock,
    pub ptr: *mut schar,
    pub block_min: *mut schar,
    pub block_max: *mut schar,
}
impl ::std::default::Default for Struct_CvSeqWriter {
    fn default() -> Struct_CvSeqWriter { unsafe { ::std::mem::zeroed() } }
}
pub type CvSeqWriter = Struct_CvSeqWriter;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvSeqReader {
    pub header_size: ::libc::c_int,
    pub seq: *mut CvSeq,
    pub block: *mut CvSeqBlock,
    pub ptr: *mut schar,
    pub block_min: *mut schar,
    pub block_max: *mut schar,
    pub delta_index: ::libc::c_int,
    pub prev_elem: *mut schar,
}
impl ::std::default::Default for Struct_CvSeqReader {
    fn default() -> Struct_CvSeqReader { unsafe { ::std::mem::zeroed() } }
}
pub type CvSeqReader = Struct_CvSeqReader;
pub enum Struct_CvFileStorage { }
pub type CvFileStorage = Struct_CvFileStorage;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvAttrList {
    pub attr: *mut *const ::libc::c_char,
    pub next: *mut Struct_CvAttrList,
}
impl ::std::default::Default for Struct_CvAttrList {
    fn default() -> Struct_CvAttrList { unsafe { ::std::mem::zeroed() } }
}
pub type CvAttrList = Struct_CvAttrList;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvString {
    pub len: ::libc::c_int,
    pub ptr: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_CvString {
    fn default() -> Struct_CvString { unsafe { ::std::mem::zeroed() } }
}
pub type CvString = Struct_CvString;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvStringHashNode {
    pub hashval: ::libc::c_uint,
    pub _str: CvString,
    pub next: *mut Struct_CvStringHashNode,
}
impl ::std::default::Default for Struct_CvStringHashNode {
    fn default() -> Struct_CvStringHashNode {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CvStringHashNode = Struct_CvStringHashNode;
pub enum Struct_CvGenericHash { }
pub type CvFileNodeHash = Struct_CvGenericHash;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvFileNode {
    pub tag: ::libc::c_int,
    pub info: *mut Struct_CvTypeInfo,
    pub data: Union_Unnamed5,
}
impl ::std::default::Default for Struct_CvFileNode {
    fn default() -> Struct_CvFileNode { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed5 {
    pub unsafe fn f(&mut self) -> *mut ::libc::c_double {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn i(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn str(&mut self) -> *mut CvString {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn seq(&mut self) -> *mut *mut CvSeq {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn map(&mut self) -> *mut *mut CvFileNodeHash {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Union_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type CvFileNode = Struct_CvFileNode;
pub type CvIsInstanceFunc =
    ::std::option::Option<extern "C" fn(struct_ptr: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub type CvReleaseFunc =
    ::std::option::Option<extern "C" fn
                              (struct_dblptr: *mut *mut ::libc::c_void)
                              -> ()>;
pub type CvReadFunc =
    ::std::option::Option<extern "C" fn
                              (storage: *mut CvFileStorage,
                               node: *mut CvFileNode) -> *mut ::libc::c_void>;
pub type CvWriteFunc =
    ::std::option::Option<extern "C" fn
                              (storage: *mut CvFileStorage,
                               name: *const ::libc::c_char,
                               struct_ptr: *const ::libc::c_void,
                               attributes: CvAttrList) -> ()>;
pub type CvCloneFunc =
    ::std::option::Option<extern "C" fn(struct_ptr: *const ::libc::c_void)
                              -> *mut ::libc::c_void>;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvTypeInfo {
    pub flags: ::libc::c_int,
    pub header_size: ::libc::c_int,
    pub prev: *mut Struct_CvTypeInfo,
    pub next: *mut Struct_CvTypeInfo,
    pub type_name: *const ::libc::c_char,
    pub is_instance: CvIsInstanceFunc,
    pub release: CvReleaseFunc,
    pub read: CvReadFunc,
    pub write: CvWriteFunc,
    pub clone: CvCloneFunc,
}
impl ::std::default::Default for Struct_CvTypeInfo {
    fn default() -> Struct_CvTypeInfo { unsafe { ::std::mem::zeroed() } }
}
pub type CvTypeInfo = Struct_CvTypeInfo;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvPluginFuncInfo {
    pub func_addr: *mut *mut ::libc::c_void,
    pub default_func_addr: *mut ::libc::c_void,
    pub func_names: *const ::libc::c_char,
    pub search_modules: ::libc::c_int,
    pub loaded_from: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvPluginFuncInfo {
    fn default() -> Struct_CvPluginFuncInfo {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CvPluginFuncInfo = Struct_CvPluginFuncInfo;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvModuleInfo {
    pub next: *mut Struct_CvModuleInfo,
    pub name: *const ::libc::c_char,
    pub version: *const ::libc::c_char,
    pub func_tab: *mut CvPluginFuncInfo,
}
impl ::std::default::Default for Struct_CvModuleInfo {
    fn default() -> Struct_CvModuleInfo { unsafe { ::std::mem::zeroed() } }
}
pub type CvModuleInfo = Struct_CvModuleInfo;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvNArrayIterator {
    pub count: ::libc::c_int,
    pub dims: ::libc::c_int,
    pub size: CvSize,
    pub ptr: [*mut uchar; 10usize],
    pub stack: [::libc::c_int; 32usize],
    pub hdr: [*mut CvMatND; 10usize],
}
impl ::std::default::Default for Struct_CvNArrayIterator {
    fn default() -> Struct_CvNArrayIterator {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CvNArrayIterator = Struct_CvNArrayIterator;
pub type CvCmpFunc =
    ::std::option::Option<extern "C" fn
                              (a: *const ::libc::c_void,
                               b: *const ::libc::c_void,
                               userdata: *mut ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvGraphScanner {
    pub vtx: *mut CvGraphVtx,
    pub dst: *mut CvGraphVtx,
    pub edge: *mut CvGraphEdge,
    pub graph: *mut CvGraph,
    pub stack: *mut CvSeq,
    pub index: ::libc::c_int,
    pub mask: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvGraphScanner {
    fn default() -> Struct_CvGraphScanner { unsafe { ::std::mem::zeroed() } }
}
pub type CvGraphScanner = Struct_CvGraphScanner;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvFont {
    pub nameFont: *const ::libc::c_char,
    pub color: CvScalar,
    pub font_face: ::libc::c_int,
    pub ascii: *const ::libc::c_int,
    pub greek: *const ::libc::c_int,
    pub cyrillic: *const ::libc::c_int,
    pub hscale: ::libc::c_float,
    pub vscale: ::libc::c_float,
    pub shear: ::libc::c_float,
    pub thickness: ::libc::c_int,
    pub dx: ::libc::c_float,
    pub line_type: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvFont {
    fn default() -> Struct_CvFont { unsafe { ::std::mem::zeroed() } }
}
pub type CvFont = Struct_CvFont;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_CvTreeNodeIterator {
    pub node: *const ::libc::c_void,
    pub level: ::libc::c_int,
    pub max_level: ::libc::c_int,
}
impl ::std::default::Default for Struct_CvTreeNodeIterator {
    fn default() -> Struct_CvTreeNodeIterator {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CvTreeNodeIterator = Struct_CvTreeNodeIterator;
pub type CvAllocFunc =
    ::std::option::Option<extern "C" fn
                              (size: size_t, userdata: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type CvFreeFunc =
    ::std::option::Option<extern "C" fn
                              (pptr: *mut ::libc::c_void,
                               userdata: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type Cv_iplCreateImageHeader =
    ::std::option::Option<extern "C" fn
                              (arg1: ::libc::c_int, arg2: ::libc::c_int,
                               arg3: ::libc::c_int, arg4: *mut ::libc::c_char,
                               arg5: *mut ::libc::c_char, arg6: ::libc::c_int,
                               arg7: ::libc::c_int, arg8: ::libc::c_int,
                               arg9: ::libc::c_int, arg10: ::libc::c_int,
                               arg11: *mut IplROI, arg12: *mut IplImage,
                               arg13: *mut ::libc::c_void,
                               arg14: *mut IplTileInfo) -> *mut IplImage>;
pub type Cv_iplAllocateImageData =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut IplImage, arg2: ::libc::c_int,
                               arg3: ::libc::c_int) -> ()>;
pub type Cv_iplDeallocate =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut IplImage, arg2: ::libc::c_int)
                              -> ()>;
pub type Cv_iplCreateROI =
    ::std::option::Option<extern "C" fn
                              (arg1: ::libc::c_int, arg2: ::libc::c_int,
                               arg3: ::libc::c_int, arg4: ::libc::c_int,
                               arg5: ::libc::c_int) -> *mut IplROI>;
pub type Cv_iplCloneImage =
    ::std::option::Option<extern "C" fn(arg1: *const IplImage)
                              -> *mut IplImage>;
pub type CvErrorCallback =
    ::std::option::Option<extern "C" fn
                              (status: ::libc::c_int,
                               func_name: *const ::libc::c_char,
                               err_msg: *const ::libc::c_char,
                               file_name: *const ::libc::c_char,
                               line: ::libc::c_int,
                               userdata: *mut ::libc::c_void)
                              -> ::libc::c_int>;

extern "C" {
    pub fn cvAlloc(size: size_t) -> *mut ::libc::c_void;
    pub fn cvFree_(ptr: *mut ::libc::c_void) -> ();
    pub fn cvCreateImageHeader(size: CvSize, depth: ::libc::c_int,
                               channels: ::libc::c_int) -> *mut IplImage;
    pub fn cvInitImageHeader(image: *mut IplImage, size: CvSize,
                             depth: ::libc::c_int, channels: ::libc::c_int,
                             origin: ::libc::c_int, align: ::libc::c_int)
     -> *mut IplImage;
    pub fn cvCreateImage(size: CvSize, depth: ::libc::c_int,
                         channels: ::libc::c_int) -> *mut IplImage;
    pub fn cvReleaseImageHeader(image: *mut *mut IplImage) -> ();
    pub fn cvReleaseImage(image: *mut *mut IplImage) -> ();
    pub fn cvCloneImage(image: *const IplImage) -> *mut IplImage;
    pub fn cvSetImageCOI(image: *mut IplImage, coi: ::libc::c_int) -> ();
    pub fn cvGetImageCOI(image: *const IplImage) -> ::libc::c_int;
    pub fn cvSetImageROI(image: *mut IplImage, rect: CvRect) -> ();
    pub fn cvResetImageROI(image: *mut IplImage) -> ();
    pub fn cvGetImageROI(image: *const IplImage) -> CvRect;
    pub fn cvCreateMatHeader(rows: ::libc::c_int, cols: ::libc::c_int,
                             _type: ::libc::c_int) -> *mut CvMat;
    pub fn cvInitMatHeader(mat: *mut CvMat, rows: ::libc::c_int,
                           cols: ::libc::c_int, _type: ::libc::c_int,
                           data: *mut ::libc::c_void, step: ::libc::c_int)
     -> *mut CvMat;
    pub fn cvCreateMat(rows: ::libc::c_int, cols: ::libc::c_int,
                       _type: ::libc::c_int) -> *mut CvMat;
    pub fn cvReleaseMat(mat: *mut *mut CvMat) -> ();
    pub fn cvCloneMat(mat: *const CvMat) -> *mut CvMat;
    pub fn cvGetSubRect(arr: *const CvArr, submat: *mut CvMat, rect: CvRect)
     -> *mut CvMat;
    pub fn cvGetRows(arr: *const CvArr, submat: *mut CvMat,
                     start_row: ::libc::c_int, end_row: ::libc::c_int,
                     delta_row: ::libc::c_int) -> *mut CvMat;
    pub fn cvGetCols(arr: *const CvArr, submat: *mut CvMat,
                     start_col: ::libc::c_int, end_col: ::libc::c_int)
     -> *mut CvMat;
    pub fn cvGetDiag(arr: *const CvArr, submat: *mut CvMat,
                     diag: ::libc::c_int) -> *mut CvMat;
    pub fn cvScalarToRawData(scalar: *const CvScalar,
                             data: *mut ::libc::c_void, _type: ::libc::c_int,
                             extend_to_12: ::libc::c_int) -> ();
    pub fn cvRawDataToScalar(data: *const ::libc::c_void,
                             _type: ::libc::c_int, scalar: *mut CvScalar)
     -> ();
    pub fn cvCreateMatNDHeader(dims: ::libc::c_int,
                               sizes: *const ::libc::c_int,
                               _type: ::libc::c_int) -> *mut CvMatND;
    pub fn cvCreateMatND(dims: ::libc::c_int, sizes: *const ::libc::c_int,
                         _type: ::libc::c_int) -> *mut CvMatND;
    pub fn cvInitMatNDHeader(mat: *mut CvMatND, dims: ::libc::c_int,
                             sizes: *const ::libc::c_int,
                             _type: ::libc::c_int, data: *mut ::libc::c_void)
     -> *mut CvMatND;
    pub fn cvCloneMatND(mat: *const CvMatND) -> *mut CvMatND;
    pub fn cvCreateSparseMat(dims: ::libc::c_int, sizes: *const ::libc::c_int,
                             _type: ::libc::c_int) -> *mut CvSparseMat;
    pub fn cvReleaseSparseMat(mat: *mut *mut CvSparseMat) -> ();
    pub fn cvCloneSparseMat(mat: *const CvSparseMat) -> *mut CvSparseMat;
    pub fn cvInitSparseMatIterator(mat: *const CvSparseMat,
                                   mat_iterator: *mut CvSparseMatIterator)
     -> *mut CvSparseNode;
    pub fn cvInitNArrayIterator(count: ::libc::c_int, arrs: *mut *mut CvArr,
                                mask: *const CvArr, stubs: *mut CvMatND,
                                array_iterator: *mut CvNArrayIterator,
                                flags: ::libc::c_int) -> ::libc::c_int;
    pub fn cvNextNArraySlice(array_iterator: *mut CvNArrayIterator)
     -> ::libc::c_int;
    pub fn cvGetElemType(arr: *const CvArr) -> ::libc::c_int;
    pub fn cvGetDims(arr: *const CvArr, sizes: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn cvGetDimSize(arr: *const CvArr, index: ::libc::c_int)
     -> ::libc::c_int;
    pub fn cvPtr1D(arr: *const CvArr, idx0: ::libc::c_int,
                   _type: *mut ::libc::c_int) -> *mut uchar;
    pub fn cvPtr2D(arr: *const CvArr, idx0: ::libc::c_int,
                   idx1: ::libc::c_int, _type: *mut ::libc::c_int)
     -> *mut uchar;
    pub fn cvPtr3D(arr: *const CvArr, idx0: ::libc::c_int,
                   idx1: ::libc::c_int, idx2: ::libc::c_int,
                   _type: *mut ::libc::c_int) -> *mut uchar;
    pub fn cvPtrND(arr: *const CvArr, idx: *const ::libc::c_int,
                   _type: *mut ::libc::c_int, create_node: ::libc::c_int,
                   precalc_hashval: *mut ::libc::c_uint) -> *mut uchar;
    pub fn cvGet1D(arr: *const CvArr, idx0: ::libc::c_int) -> CvScalar;
    pub fn cvGet2D(arr: *const CvArr, idx0: ::libc::c_int,
                   idx1: ::libc::c_int) -> CvScalar;
    pub fn cvGet3D(arr: *const CvArr, idx0: ::libc::c_int,
                   idx1: ::libc::c_int, idx2: ::libc::c_int) -> CvScalar;
    pub fn cvGetND(arr: *const CvArr, idx: *const ::libc::c_int) -> CvScalar;
    pub fn cvGetReal1D(arr: *const CvArr, idx0: ::libc::c_int)
     -> ::libc::c_double;
    pub fn cvGetReal2D(arr: *const CvArr, idx0: ::libc::c_int,
                       idx1: ::libc::c_int) -> ::libc::c_double;
    pub fn cvGetReal3D(arr: *const CvArr, idx0: ::libc::c_int,
                       idx1: ::libc::c_int, idx2: ::libc::c_int)
     -> ::libc::c_double;
    pub fn cvGetRealND(arr: *const CvArr, idx: *const ::libc::c_int)
     -> ::libc::c_double;
    pub fn cvSet1D(arr: *mut CvArr, idx0: ::libc::c_int, value: CvScalar)
     -> ();
    pub fn cvSet2D(arr: *mut CvArr, idx0: ::libc::c_int, idx1: ::libc::c_int,
                   value: CvScalar) -> ();
    pub fn cvSet3D(arr: *mut CvArr, idx0: ::libc::c_int, idx1: ::libc::c_int,
                   idx2: ::libc::c_int, value: CvScalar) -> ();
    pub fn cvSetND(arr: *mut CvArr, idx: *const ::libc::c_int,
                   value: CvScalar) -> ();
    pub fn cvSetReal1D(arr: *mut CvArr, idx0: ::libc::c_int,
                       value: ::libc::c_double) -> ();
    pub fn cvSetReal2D(arr: *mut CvArr, idx0: ::libc::c_int,
                       idx1: ::libc::c_int, value: ::libc::c_double) -> ();
    pub fn cvSetReal3D(arr: *mut CvArr, idx0: ::libc::c_int,
                       idx1: ::libc::c_int, idx2: ::libc::c_int,
                       value: ::libc::c_double) -> ();
    pub fn cvSetRealND(arr: *mut CvArr, idx: *const ::libc::c_int,
                       value: ::libc::c_double) -> ();
    pub fn cvClearND(arr: *mut CvArr, idx: *const ::libc::c_int) -> ();
    pub fn cvGetMat(arr: *const CvArr, header: *mut CvMat,
                    coi: *mut ::libc::c_int, allowND: ::libc::c_int)
     -> *mut CvMat;
    pub fn cvGetImage(arr: *const CvArr, image_header: *mut IplImage)
     -> *mut IplImage;
    pub fn cvReshapeMatND(arr: *const CvArr, sizeof_header: ::libc::c_int,
                          header: *mut CvArr, new_cn: ::libc::c_int,
                          new_dims: ::libc::c_int,
                          new_sizes: *mut ::libc::c_int) -> *mut CvArr;
    pub fn cvReshape(arr: *const CvArr, header: *mut CvMat,
                     new_cn: ::libc::c_int, new_rows: ::libc::c_int)
     -> *mut CvMat;
    pub fn cvRepeat(src: *const CvArr, dst: *mut CvArr) -> ();
    pub fn cvCreateData(arr: *mut CvArr) -> ();
    pub fn cvReleaseData(arr: *mut CvArr) -> ();
    pub fn cvSetData(arr: *mut CvArr, data: *mut ::libc::c_void,
                     step: ::libc::c_int) -> ();
    pub fn cvGetRawData(arr: *const CvArr, data: *mut *mut uchar,
                        step: *mut ::libc::c_int, roi_size: *mut CvSize)
     -> ();
    pub fn cvGetSize(arr: *const CvArr) -> CvSize;
    pub fn cvCopy(src: *const CvArr, dst: *mut CvArr, mask: *const CvArr)
     -> ();
    pub fn cvSet(arr: *mut CvArr, value: CvScalar, mask: *const CvArr) -> ();
    pub fn cvSetZero(arr: *mut CvArr) -> ();
    pub fn cvSplit(src: *const CvArr, dst0: *mut CvArr, dst1: *mut CvArr,
                   dst2: *mut CvArr, dst3: *mut CvArr) -> ();
    pub fn cvMerge(src0: *const CvArr, src1: *const CvArr, src2: *const CvArr,
                   src3: *const CvArr, dst: *mut CvArr) -> ();
    pub fn cvMixChannels(src: *mut *const CvArr, src_count: ::libc::c_int,
                         dst: *mut *mut CvArr, dst_count: ::libc::c_int,
                         from_to: *const ::libc::c_int,
                         pair_count: ::libc::c_int) -> ();
    pub fn cvConvertScale(src: *const CvArr, dst: *mut CvArr,
                          scale: ::libc::c_double, shift: ::libc::c_double)
     -> ();
    pub fn cvConvertScaleAbs(src: *const CvArr, dst: *mut CvArr,
                             scale: ::libc::c_double, shift: ::libc::c_double)
     -> ();
    pub fn cvCheckTermCriteria(criteria: CvTermCriteria,
                               default_eps: ::libc::c_double,
                               default_max_iters: ::libc::c_int)
     -> CvTermCriteria;
    pub fn cvAdd(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                 mask: *const CvArr) -> ();
    pub fn cvAddS(src: *const CvArr, value: CvScalar, dst: *mut CvArr,
                  mask: *const CvArr) -> ();
    pub fn cvSub(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                 mask: *const CvArr) -> ();
    pub fn cvSubRS(src: *const CvArr, value: CvScalar, dst: *mut CvArr,
                   mask: *const CvArr) -> ();
    pub fn cvMul(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                 scale: ::libc::c_double) -> ();
    pub fn cvDiv(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                 scale: ::libc::c_double) -> ();
    pub fn cvScaleAdd(src1: *const CvArr, scale: CvScalar, src2: *const CvArr,
                      dst: *mut CvArr) -> ();
    pub fn cvAddWeighted(src1: *const CvArr, alpha: ::libc::c_double,
                         src2: *const CvArr, beta: ::libc::c_double,
                         gamma: ::libc::c_double, dst: *mut CvArr) -> ();
    pub fn cvDotProduct(src1: *const CvArr, src2: *const CvArr)
     -> ::libc::c_double;
    pub fn cvAnd(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                 mask: *const CvArr) -> ();
    pub fn cvAndS(src: *const CvArr, value: CvScalar, dst: *mut CvArr,
                  mask: *const CvArr) -> ();
    pub fn cvOr(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                mask: *const CvArr) -> ();
    pub fn cvOrS(src: *const CvArr, value: CvScalar, dst: *mut CvArr,
                 mask: *const CvArr) -> ();
    pub fn cvXor(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                 mask: *const CvArr) -> ();
    pub fn cvXorS(src: *const CvArr, value: CvScalar, dst: *mut CvArr,
                  mask: *const CvArr) -> ();
    pub fn cvNot(src: *const CvArr, dst: *mut CvArr) -> ();
    pub fn cvInRange(src: *const CvArr, lower: *const CvArr,
                     upper: *const CvArr, dst: *mut CvArr) -> ();
    pub fn cvInRangeS(src: *const CvArr, lower: CvScalar, upper: CvScalar,
                      dst: *mut CvArr) -> ();
    pub fn cvCmp(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                 cmp_op: ::libc::c_int) -> ();
    pub fn cvCmpS(src: *const CvArr, value: ::libc::c_double, dst: *mut CvArr,
                  cmp_op: ::libc::c_int) -> ();
    pub fn cvMin(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr)
     -> ();
    pub fn cvMax(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr)
     -> ();
    pub fn cvMinS(src: *const CvArr, value: ::libc::c_double, dst: *mut CvArr)
     -> ();
    pub fn cvMaxS(src: *const CvArr, value: ::libc::c_double, dst: *mut CvArr)
     -> ();
    pub fn cvAbsDiff(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr)
     -> ();
    pub fn cvAbsDiffS(src: *const CvArr, dst: *mut CvArr, value: CvScalar)
     -> ();
    pub fn cvCartToPolar(x: *const CvArr, y: *const CvArr,
                         magnitude: *mut CvArr, angle: *mut CvArr,
                         angle_in_degrees: ::libc::c_int) -> ();
    pub fn cvPolarToCart(magnitude: *const CvArr, angle: *const CvArr,
                         x: *mut CvArr, y: *mut CvArr,
                         angle_in_degrees: ::libc::c_int) -> ();
    pub fn cvPow(src: *const CvArr, dst: *mut CvArr, power: ::libc::c_double)
     -> ();
    pub fn cvExp(src: *const CvArr, dst: *mut CvArr) -> ();
    pub fn cvLog(src: *const CvArr, dst: *mut CvArr) -> ();
    pub fn cvFastArctan(y: ::libc::c_float, x: ::libc::c_float)
     -> ::libc::c_float;
    pub fn cvCbrt(value: ::libc::c_float) -> ::libc::c_float;
    pub fn cvCheckArr(arr: *const CvArr, flags: ::libc::c_int,
                      min_val: ::libc::c_double, max_val: ::libc::c_double)
     -> ::libc::c_int;
    pub fn cvRandArr(rng: *mut CvRNG, arr: *mut CvArr,
                     dist_type: ::libc::c_int, param1: CvScalar,
                     param2: CvScalar) -> ();
    pub fn cvRandShuffle(mat: *mut CvArr, rng: *mut CvRNG,
                         iter_factor: ::libc::c_double) -> ();
    pub fn cvSort(src: *const CvArr, dst: *mut CvArr, idxmat: *mut CvArr,
                  flags: ::libc::c_int) -> ();
    pub fn cvSolveCubic(coeffs: *const CvMat, roots: *mut CvMat)
     -> ::libc::c_int;
    pub fn cvSolvePoly(coeffs: *const CvMat, roots2: *mut CvMat,
                       maxiter: ::libc::c_int, fig: ::libc::c_int) -> ();
    pub fn cvCrossProduct(src1: *const CvArr, src2: *const CvArr,
                          dst: *mut CvArr) -> ();
    pub fn cvGEMM(src1: *const CvArr, src2: *const CvArr,
                  alpha: ::libc::c_double, src3: *const CvArr,
                  beta: ::libc::c_double, dst: *mut CvArr,
                  tABC: ::libc::c_int) -> ();
    pub fn cvTransform(src: *const CvArr, dst: *mut CvArr,
                       transmat: *const CvMat, shiftvec: *const CvMat) -> ();
    pub fn cvPerspectiveTransform(src: *const CvArr, dst: *mut CvArr,
                                  mat: *const CvMat) -> ();
    pub fn cvMulTransposed(src: *const CvArr, dst: *mut CvArr,
                           order: ::libc::c_int, delta: *const CvArr,
                           scale: ::libc::c_double) -> ();
    pub fn cvTranspose(src: *const CvArr, dst: *mut CvArr) -> ();
    pub fn cvCompleteSymm(matrix: *mut CvMat, LtoR: ::libc::c_int) -> ();
    pub fn cvFlip(src: *const CvArr, dst: *mut CvArr,
                  flip_mode: ::libc::c_int) -> ();
    pub fn cvSVD(A: *mut CvArr, W: *mut CvArr, U: *mut CvArr, V: *mut CvArr,
                 flags: ::libc::c_int) -> ();
    pub fn cvSVBkSb(W: *const CvArr, U: *const CvArr, V: *const CvArr,
                    B: *const CvArr, X: *mut CvArr, flags: ::libc::c_int)
     -> ();
    pub fn cvInvert(src: *const CvArr, dst: *mut CvArr, method: ::libc::c_int)
     -> ::libc::c_double;
    pub fn cvSolve(src1: *const CvArr, src2: *const CvArr, dst: *mut CvArr,
                   method: ::libc::c_int) -> ::libc::c_int;
    pub fn cvDet(mat: *const CvArr) -> ::libc::c_double;
    pub fn cvTrace(mat: *const CvArr) -> CvScalar;
    pub fn cvEigenVV(mat: *mut CvArr, evects: *mut CvArr, evals: *mut CvArr,
                     eps: ::libc::c_double, lowindex: ::libc::c_int,
                     highindex: ::libc::c_int) -> ();
    pub fn cvSetIdentity(mat: *mut CvArr, value: CvScalar) -> ();
    pub fn cvRange(mat: *mut CvArr, start: ::libc::c_double,
                   end: ::libc::c_double) -> *mut CvArr;
    pub fn cvCalcCovarMatrix(vects: *mut *const CvArr, count: ::libc::c_int,
                             cov_mat: *mut CvArr, avg: *mut CvArr,
                             flags: ::libc::c_int) -> ();
    pub fn cvCalcPCA(data: *const CvArr, mean: *mut CvArr,
                     eigenvals: *mut CvArr, eigenvects: *mut CvArr,
                     flags: ::libc::c_int) -> ();
    pub fn cvProjectPCA(data: *const CvArr, mean: *const CvArr,
                        eigenvects: *const CvArr, result: *mut CvArr) -> ();
    pub fn cvBackProjectPCA(proj: *const CvArr, mean: *const CvArr,
                            eigenvects: *const CvArr, result: *mut CvArr)
     -> ();
    pub fn cvMahalanobis(vec1: *const CvArr, vec2: *const CvArr,
                         mat: *const CvArr) -> ::libc::c_double;
    pub fn cvSum(arr: *const CvArr) -> CvScalar;
    pub fn cvCountNonZero(arr: *const CvArr) -> ::libc::c_int;
    pub fn cvAvg(arr: *const CvArr, mask: *const CvArr) -> CvScalar;
    pub fn cvAvgSdv(arr: *const CvArr, mean: *mut CvScalar,
                    std_dev: *mut CvScalar, mask: *const CvArr) -> ();
    pub fn cvMinMaxLoc(arr: *const CvArr, min_val: *mut ::libc::c_double,
                       max_val: *mut ::libc::c_double, min_loc: *mut CvPoint,
                       max_loc: *mut CvPoint, mask: *const CvArr) -> ();
    pub fn cvNorm(arr1: *const CvArr, arr2: *const CvArr,
                  norm_type: ::libc::c_int, mask: *const CvArr)
     -> ::libc::c_double;
    pub fn cvNormalize(src: *const CvArr, dst: *mut CvArr,
                       a: ::libc::c_double, b: ::libc::c_double,
                       norm_type: ::libc::c_int, mask: *const CvArr) -> ();
    pub fn cvReduce(src: *const CvArr, dst: *mut CvArr, dim: ::libc::c_int,
                    op: ::libc::c_int) -> ();
    pub fn cvDFT(src: *const CvArr, dst: *mut CvArr, flags: ::libc::c_int,
                 nonzero_rows: ::libc::c_int) -> ();
    pub fn cvMulSpectrums(src1: *const CvArr, src2: *const CvArr,
                          dst: *mut CvArr, flags: ::libc::c_int) -> ();
    pub fn cvGetOptimalDFTSize(size0: ::libc::c_int) -> ::libc::c_int;
    pub fn cvDCT(src: *const CvArr, dst: *mut CvArr, flags: ::libc::c_int)
     -> ();
    pub fn cvSliceLength(slice: CvSlice, seq: *const CvSeq) -> ::libc::c_int;
    pub fn cvCreateMemStorage(block_size: ::libc::c_int) -> *mut CvMemStorage;
    pub fn cvCreateChildMemStorage(parent: *mut CvMemStorage)
     -> *mut CvMemStorage;
    pub fn cvReleaseMemStorage(storage: *mut *mut CvMemStorage) -> ();
    pub fn cvClearMemStorage(storage: *mut CvMemStorage) -> ();
    pub fn cvSaveMemStoragePos(storage: *const CvMemStorage,
                               pos: *mut CvMemStoragePos) -> ();
    pub fn cvRestoreMemStoragePos(storage: *mut CvMemStorage,
                                  pos: *mut CvMemStoragePos) -> ();
    pub fn cvMemStorageAlloc(storage: *mut CvMemStorage, size: size_t)
     -> *mut ::libc::c_void;
    pub fn cvMemStorageAllocString(storage: *mut CvMemStorage,
                                   ptr: *const ::libc::c_char,
                                   len: ::libc::c_int) -> CvString;
    pub fn cvCreateSeq(seq_flags: ::libc::c_int, header_size: size_t,
                       elem_size: size_t, storage: *mut CvMemStorage)
     -> *mut CvSeq;
    pub fn cvSetSeqBlockSize(seq: *mut CvSeq, delta_elems: ::libc::c_int)
     -> ();
    pub fn cvSeqPush(seq: *mut CvSeq, element: *const ::libc::c_void)
     -> *mut schar;
    pub fn cvSeqPushFront(seq: *mut CvSeq, element: *const ::libc::c_void)
     -> *mut schar;
    pub fn cvSeqPop(seq: *mut CvSeq, element: *mut ::libc::c_void) -> ();
    pub fn cvSeqPopFront(seq: *mut CvSeq, element: *mut ::libc::c_void) -> ();
    pub fn cvSeqPushMulti(seq: *mut CvSeq, elements: *const ::libc::c_void,
                          count: ::libc::c_int, in_front: ::libc::c_int)
     -> ();
    pub fn cvSeqPopMulti(seq: *mut CvSeq, elements: *mut ::libc::c_void,
                         count: ::libc::c_int, in_front: ::libc::c_int) -> ();
    pub fn cvSeqInsert(seq: *mut CvSeq, before_index: ::libc::c_int,
                       element: *const ::libc::c_void) -> *mut schar;
    pub fn cvSeqRemove(seq: *mut CvSeq, index: ::libc::c_int) -> ();
    pub fn cvClearSeq(seq: *mut CvSeq) -> ();
    pub fn cvGetSeqElem(seq: *const CvSeq, index: ::libc::c_int)
     -> *mut schar;
    pub fn cvSeqElemIdx(seq: *const CvSeq, element: *const ::libc::c_void,
                        block: *mut *mut CvSeqBlock) -> ::libc::c_int;
    pub fn cvStartAppendToSeq(seq: *mut CvSeq, writer: *mut CvSeqWriter)
     -> ();
    pub fn cvStartWriteSeq(seq_flags: ::libc::c_int,
                           header_size: ::libc::c_int,
                           elem_size: ::libc::c_int,
                           storage: *mut CvMemStorage,
                           writer: *mut CvSeqWriter) -> ();
    pub fn cvEndWriteSeq(writer: *mut CvSeqWriter) -> *mut CvSeq;
    pub fn cvFlushSeqWriter(writer: *mut CvSeqWriter) -> ();
    pub fn cvStartReadSeq(seq: *const CvSeq, reader: *mut CvSeqReader,
                          reverse: ::libc::c_int) -> ();
    pub fn cvGetSeqReaderPos(reader: *mut CvSeqReader) -> ::libc::c_int;
    pub fn cvSetSeqReaderPos(reader: *mut CvSeqReader, index: ::libc::c_int,
                             is_relative: ::libc::c_int) -> ();
    pub fn cvCvtSeqToArray(seq: *const CvSeq, elements: *mut ::libc::c_void,
                           slice: CvSlice) -> *mut ::libc::c_void;
    pub fn cvMakeSeqHeaderForArray(seq_type: ::libc::c_int,
                                   header_size: ::libc::c_int,
                                   elem_size: ::libc::c_int,
                                   elements: *mut ::libc::c_void,
                                   total: ::libc::c_int, seq: *mut CvSeq,
                                   block: *mut CvSeqBlock) -> *mut CvSeq;
    pub fn cvSeqSlice(seq: *const CvSeq, slice: CvSlice,
                      storage: *mut CvMemStorage, copy_data: ::libc::c_int)
     -> *mut CvSeq;
    pub fn cvSeqRemoveSlice(seq: *mut CvSeq, slice: CvSlice) -> ();
    pub fn cvSeqInsertSlice(seq: *mut CvSeq, before_index: ::libc::c_int,
                            from_arr: *const CvArr) -> ();
    pub fn cvSeqSort(seq: *mut CvSeq, func: CvCmpFunc,
                     userdata: *mut ::libc::c_void) -> ();
    pub fn cvSeqSearch(seq: *mut CvSeq, elem: *const ::libc::c_void,
                       func: CvCmpFunc, is_sorted: ::libc::c_int,
                       elem_idx: *mut ::libc::c_int,
                       userdata: *mut ::libc::c_void) -> *mut schar;
    pub fn cvSeqInvert(seq: *mut CvSeq) -> ();
    pub fn cvSeqPartition(seq: *const CvSeq, storage: *mut CvMemStorage,
                          labels: *mut *mut CvSeq, is_equal: CvCmpFunc,
                          userdata: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn cvChangeSeqBlock(reader: *mut ::libc::c_void,
                            direction: ::libc::c_int) -> ();
    pub fn cvCreateSeqBlock(writer: *mut CvSeqWriter) -> ();
    pub fn cvCreateSet(set_flags: ::libc::c_int, header_size: ::libc::c_int,
                       elem_size: ::libc::c_int, storage: *mut CvMemStorage)
     -> *mut CvSet;
    pub fn cvSetAdd(set_header: *mut CvSet, elem: *mut CvSetElem,
                    inserted_elem: *mut *mut CvSetElem) -> ::libc::c_int;
    pub fn cvSetRemove(set_header: *mut CvSet, index: ::libc::c_int) -> ();
    pub fn cvClearSet(set_header: *mut CvSet) -> ();
    pub fn cvCreateGraph(graph_flags: ::libc::c_int,
                         header_size: ::libc::c_int, vtx_size: ::libc::c_int,
                         edge_size: ::libc::c_int, storage: *mut CvMemStorage)
     -> *mut CvGraph;
    pub fn cvGraphAddVtx(graph: *mut CvGraph, vtx: *const CvGraphVtx,
                         inserted_vtx: *mut *mut CvGraphVtx) -> ::libc::c_int;
    pub fn cvGraphRemoveVtx(graph: *mut CvGraph, index: ::libc::c_int)
     -> ::libc::c_int;
    pub fn cvGraphRemoveVtxByPtr(graph: *mut CvGraph, vtx: *mut CvGraphVtx)
     -> ::libc::c_int;
    pub fn cvGraphAddEdge(graph: *mut CvGraph, start_idx: ::libc::c_int,
                          end_idx: ::libc::c_int, edge: *const CvGraphEdge,
                          inserted_edge: *mut *mut CvGraphEdge)
     -> ::libc::c_int;
    pub fn cvGraphAddEdgeByPtr(graph: *mut CvGraph,
                               start_vtx: *mut CvGraphVtx,
                               end_vtx: *mut CvGraphVtx,
                               edge: *const CvGraphEdge,
                               inserted_edge: *mut *mut CvGraphEdge)
     -> ::libc::c_int;
    pub fn cvGraphRemoveEdge(graph: *mut CvGraph, start_idx: ::libc::c_int,
                             end_idx: ::libc::c_int) -> ();
    pub fn cvGraphRemoveEdgeByPtr(graph: *mut CvGraph,
                                  start_vtx: *mut CvGraphVtx,
                                  end_vtx: *mut CvGraphVtx) -> ();
    pub fn cvFindGraphEdge(graph: *const CvGraph, start_idx: ::libc::c_int,
                           end_idx: ::libc::c_int) -> *mut CvGraphEdge;
    pub fn cvFindGraphEdgeByPtr(graph: *const CvGraph,
                                start_vtx: *const CvGraphVtx,
                                end_vtx: *const CvGraphVtx)
     -> *mut CvGraphEdge;
    pub fn cvClearGraph(graph: *mut CvGraph) -> ();
    pub fn cvGraphVtxDegree(graph: *const CvGraph, vtx_idx: ::libc::c_int)
     -> ::libc::c_int;
    pub fn cvGraphVtxDegreeByPtr(graph: *const CvGraph,
                                 vtx: *const CvGraphVtx) -> ::libc::c_int;
    pub fn cvCreateGraphScanner(graph: *mut CvGraph, vtx: *mut CvGraphVtx,
                                mask: ::libc::c_int) -> *mut CvGraphScanner;
    pub fn cvReleaseGraphScanner(scanner: *mut *mut CvGraphScanner) -> ();
    pub fn cvNextGraphItem(scanner: *mut CvGraphScanner) -> ::libc::c_int;
    pub fn cvCloneGraph(graph: *const CvGraph, storage: *mut CvMemStorage)
     -> *mut CvGraph;
    pub fn cvLine(img: *mut CvArr, pt1: CvPoint, pt2: CvPoint,
                  color: CvScalar, thickness: ::libc::c_int,
                  line_type: ::libc::c_int, shift: ::libc::c_int) -> ();
    pub fn cvRectangle(img: *mut CvArr, pt1: CvPoint, pt2: CvPoint,
                       color: CvScalar, thickness: ::libc::c_int,
                       line_type: ::libc::c_int, shift: ::libc::c_int) -> ();
    pub fn cvRectangleR(img: *mut CvArr, r: CvRect, color: CvScalar,
                        thickness: ::libc::c_int, line_type: ::libc::c_int,
                        shift: ::libc::c_int) -> ();
    pub fn cvCircle(img: *mut CvArr, center: CvPoint, radius: ::libc::c_int,
                    color: CvScalar, thickness: ::libc::c_int,
                    line_type: ::libc::c_int, shift: ::libc::c_int) -> ();
    pub fn cvEllipse(img: *mut CvArr, center: CvPoint, axes: CvSize,
                     angle: ::libc::c_double, start_angle: ::libc::c_double,
                     end_angle: ::libc::c_double, color: CvScalar,
                     thickness: ::libc::c_int, line_type: ::libc::c_int,
                     shift: ::libc::c_int) -> ();
    pub fn cvFillConvexPoly(img: *mut CvArr, pts: *const CvPoint,
                            npts: ::libc::c_int, color: CvScalar,
                            line_type: ::libc::c_int, shift: ::libc::c_int)
     -> ();
    pub fn cvFillPoly(img: *mut CvArr, pts: *mut *mut CvPoint,
                      npts: *const ::libc::c_int, contours: ::libc::c_int,
                      color: CvScalar, line_type: ::libc::c_int,
                      shift: ::libc::c_int) -> ();
    pub fn cvPolyLine(img: *mut CvArr, pts: *mut *mut CvPoint,
                      npts: *const ::libc::c_int, contours: ::libc::c_int,
                      is_closed: ::libc::c_int, color: CvScalar,
                      thickness: ::libc::c_int, line_type: ::libc::c_int,
                      shift: ::libc::c_int) -> ();
    pub fn cvClipLine(img_size: CvSize, pt1: *mut CvPoint, pt2: *mut CvPoint)
     -> ::libc::c_int;
    pub fn cvInitLineIterator(image: *const CvArr, pt1: CvPoint, pt2: CvPoint,
                              line_iterator: *mut CvLineIterator,
                              connectivity: ::libc::c_int,
                              left_to_right: ::libc::c_int) -> ::libc::c_int;
    pub fn cvInitFont(font: *mut CvFont, font_face: ::libc::c_int,
                      hscale: ::libc::c_double, vscale: ::libc::c_double,
                      shear: ::libc::c_double, thickness: ::libc::c_int,
                      line_type: ::libc::c_int) -> ();
    pub fn cvPutText(img: *mut CvArr, text: *const ::libc::c_char,
                     org: CvPoint, font: *const CvFont, color: CvScalar)
     -> ();
    pub fn cvGetTextSize(text_string: *const ::libc::c_char,
                         font: *const CvFont, text_size: *mut CvSize,
                         baseline: *mut ::libc::c_int) -> ();
    pub fn cvColorToScalar(packed_color: ::libc::c_double,
                           arrtype: ::libc::c_int) -> CvScalar;
    pub fn cvEllipse2Poly(center: CvPoint, axes: CvSize, angle: ::libc::c_int,
                          arc_start: ::libc::c_int, arc_end: ::libc::c_int,
                          pts: *mut CvPoint, delta: ::libc::c_int)
     -> ::libc::c_int;
    pub fn cvDrawContours(img: *mut CvArr, contour: *mut CvSeq,
                          external_color: CvScalar, hole_color: CvScalar,
                          max_level: ::libc::c_int, thickness: ::libc::c_int,
                          line_type: ::libc::c_int, offset: CvPoint) -> ();
    pub fn cvLUT(src: *const CvArr, dst: *mut CvArr, lut: *const CvArr) -> ();
    pub fn cvInitTreeNodeIterator(tree_iterator: *mut CvTreeNodeIterator,
                                  first: *const ::libc::c_void,
                                  max_level: ::libc::c_int) -> ();
    pub fn cvNextTreeNode(tree_iterator: *mut CvTreeNodeIterator)
     -> *mut ::libc::c_void;
    pub fn cvPrevTreeNode(tree_iterator: *mut CvTreeNodeIterator)
     -> *mut ::libc::c_void;
    pub fn cvInsertNodeIntoTree(node: *mut ::libc::c_void,
                                parent: *mut ::libc::c_void,
                                frame: *mut ::libc::c_void) -> ();
    pub fn cvRemoveNodeFromTree(node: *mut ::libc::c_void,
                                frame: *mut ::libc::c_void) -> ();
    pub fn cvTreeToNodeSeq(first: *const ::libc::c_void,
                           header_size: ::libc::c_int,
                           storage: *mut CvMemStorage) -> *mut CvSeq;
    pub fn cvKMeans2(samples: *const CvArr, cluster_count: ::libc::c_int,
                     labels: *mut CvArr, termcrit: CvTermCriteria,
                     attempts: ::libc::c_int, rng: *mut CvRNG,
                     flags: ::libc::c_int, _centers: *mut CvArr,
                     compactness: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn cvRegisterModule(module_info: *const CvModuleInfo)
     -> ::libc::c_int;
    pub fn cvUseOptimized(on_off: ::libc::c_int) -> ::libc::c_int;
    pub fn cvGetModuleInfo(module_name: *const ::libc::c_char,
                           version: *mut *const ::libc::c_char,
                           loaded_addon_plugins: *mut *const ::libc::c_char)
     -> ();
    pub fn cvSetMemoryManager(alloc_func: CvAllocFunc, free_func: CvFreeFunc,
                              userdata: *mut ::libc::c_void) -> ();
    pub fn cvSetIPLAllocators(create_header: Cv_iplCreateImageHeader,
                              allocate_data: Cv_iplAllocateImageData,
                              deallocate: Cv_iplDeallocate,
                              create_roi: Cv_iplCreateROI,
                              clone_image: Cv_iplCloneImage) -> ();
    pub fn cvOpenFileStorage(filename: *const ::libc::c_char,
                             memstorage: *mut CvMemStorage,
                             flags: ::libc::c_int,
                             encoding: *const ::libc::c_char)
     -> *mut CvFileStorage;
    pub fn cvReleaseFileStorage(fs: *mut *mut CvFileStorage) -> ();
    pub fn cvAttrValue(attr: *const CvAttrList,
                       attr_name: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn cvStartWriteStruct(fs: *mut CvFileStorage,
                              name: *const ::libc::c_char,
                              struct_flags: ::libc::c_int,
                              type_name: *const ::libc::c_char,
                              attributes: CvAttrList) -> ();
    pub fn cvEndWriteStruct(fs: *mut CvFileStorage) -> ();
    pub fn cvWriteInt(fs: *mut CvFileStorage, name: *const ::libc::c_char,
                      value: ::libc::c_int) -> ();
    pub fn cvWriteReal(fs: *mut CvFileStorage, name: *const ::libc::c_char,
                       value: ::libc::c_double) -> ();
    pub fn cvWriteString(fs: *mut CvFileStorage, name: *const ::libc::c_char,
                         str: *const ::libc::c_char, quote: ::libc::c_int)
     -> ();
    pub fn cvWriteComment(fs: *mut CvFileStorage,
                          comment: *const ::libc::c_char,
                          eol_comment: ::libc::c_int) -> ();
    pub fn cvWrite(fs: *mut CvFileStorage, name: *const ::libc::c_char,
                   ptr: *const ::libc::c_void, attributes: CvAttrList) -> ();
    pub fn cvStartNextStream(fs: *mut CvFileStorage) -> ();
    pub fn cvWriteRawData(fs: *mut CvFileStorage, src: *const ::libc::c_void,
                          len: ::libc::c_int, dt: *const ::libc::c_char)
     -> ();
    pub fn cvGetHashedKey(fs: *mut CvFileStorage, name: *const ::libc::c_char,
                          len: ::libc::c_int, create_missing: ::libc::c_int)
     -> *mut CvStringHashNode;
    pub fn cvGetRootFileNode(fs: *const CvFileStorage,
                             stream_index: ::libc::c_int) -> *mut CvFileNode;
    pub fn cvGetFileNode(fs: *mut CvFileStorage, map: *mut CvFileNode,
                         key: *const CvStringHashNode,
                         create_missing: ::libc::c_int) -> *mut CvFileNode;
    pub fn cvGetFileNodeByName(fs: *const CvFileStorage,
                               map: *const CvFileNode,
                               name: *const ::libc::c_char)
     -> *mut CvFileNode;
    pub fn cvRead(fs: *mut CvFileStorage, node: *mut CvFileNode,
                  attributes: *mut CvAttrList) -> *mut ::libc::c_void;
    pub fn cvStartReadRawData(fs: *const CvFileStorage,
                              src: *const CvFileNode,
                              reader: *mut CvSeqReader) -> ();
    pub fn cvReadRawDataSlice(fs: *const CvFileStorage,
                              reader: *mut CvSeqReader, count: ::libc::c_int,
                              dst: *mut ::libc::c_void,
                              dt: *const ::libc::c_char) -> ();
    pub fn cvReadRawData(fs: *const CvFileStorage, src: *const CvFileNode,
                         dst: *mut ::libc::c_void, dt: *const ::libc::c_char)
     -> ();
    pub fn cvWriteFileNode(fs: *mut CvFileStorage,
                           new_node_name: *const ::libc::c_char,
                           node: *const CvFileNode, embed: ::libc::c_int)
     -> ();
    pub fn cvGetFileNodeName(node: *const CvFileNode)
     -> *const ::libc::c_char;
    pub fn cvRegisterType(info: *const CvTypeInfo) -> ();
    pub fn cvUnregisterType(type_name: *const ::libc::c_char) -> ();
    pub fn cvFirstType() -> *mut CvTypeInfo;
    pub fn cvFindType(type_name: *const ::libc::c_char) -> *mut CvTypeInfo;
    pub fn cvTypeOf(struct_ptr: *const ::libc::c_void) -> *mut CvTypeInfo;
    pub fn cvRelease(struct_ptr: *mut *mut ::libc::c_void) -> ();
    pub fn cvClone(struct_ptr: *const ::libc::c_void) -> *mut ::libc::c_void;
    pub fn cvSave(filename: *const ::libc::c_char,
                  struct_ptr: *const ::libc::c_void,
                  name: *const ::libc::c_char, comment: *const ::libc::c_char,
                  attributes: CvAttrList) -> ();
    pub fn cvLoad(filename: *const ::libc::c_char,
                  memstorage: *mut CvMemStorage, name: *const ::libc::c_char,
                  real_name: *mut *const ::libc::c_char)
     -> *mut ::libc::c_void;
    pub fn cvGetTickCount() -> int64;
    pub fn cvGetTickFrequency() -> ::libc::c_double;
    pub fn cvCheckHardwareSupport(feature: ::libc::c_int) -> ::libc::c_int;
    pub fn cvGetNumThreads() -> ::libc::c_int;
    pub fn cvSetNumThreads(threads: ::libc::c_int) -> ();
    pub fn cvGetThreadNum() -> ::libc::c_int;
    pub fn cvGetErrStatus() -> ::libc::c_int;
    pub fn cvSetErrStatus(status: ::libc::c_int) -> ();
    pub fn cvGetErrMode() -> ::libc::c_int;
    pub fn cvSetErrMode(mode: ::libc::c_int) -> ::libc::c_int;
    pub fn cvError(status: ::libc::c_int, func_name: *const ::libc::c_char,
                   err_msg: *const ::libc::c_char,
                   file_name: *const ::libc::c_char, line: ::libc::c_int)
     -> ();
    pub fn cvErrorStr(status: ::libc::c_int) -> *const ::libc::c_char;
    pub fn cvGetErrInfo(errcode_desc: *mut *const ::libc::c_char,
                        description: *mut *const ::libc::c_char,
                        filename: *mut *const ::libc::c_char,
                        line: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn cvErrorFromIppStatus(ipp_status: ::libc::c_int) -> ::libc::c_int;
    pub fn cvRedirectError(error_handler: CvErrorCallback,
                           userdata: *mut ::libc::c_void,
                           prev_userdata: *mut *mut ::libc::c_void)
     -> CvErrorCallback;
    pub fn cvNulDevReport(status: ::libc::c_int,
                          func_name: *const ::libc::c_char,
                          err_msg: *const ::libc::c_char,
                          file_name: *const ::libc::c_char,
                          line: ::libc::c_int, userdata: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn cvStdErrReport(status: ::libc::c_int,
                          func_name: *const ::libc::c_char,
                          err_msg: *const ::libc::c_char,
                          file_name: *const ::libc::c_char,
                          line: ::libc::c_int, userdata: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn cvGuiBoxReport(status: ::libc::c_int,
                          func_name: *const ::libc::c_char,
                          err_msg: *const ::libc::c_char,
                          file_name: *const ::libc::c_char,
                          line: ::libc::c_int, userdata: *mut ::libc::c_void)
     -> ::libc::c_int;
}
